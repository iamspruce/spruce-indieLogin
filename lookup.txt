// server.js
// where your node app starts

// init project
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
app.use(bodyParser.json()); // for parsing application/json
app.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded
var engines = require('consolidate');
app.engine('html', engines.mustache);
app.set('view engine', 'html');
var validator = require('validator');
var crypto = require('crypto');
var querystring = require('querystring');

// http://expressjs.com/en/starter/static-files.html
app.use(express.static('public'));

// http://expressjs.com/en/starter/basic-routing.html
app.get("/", function (request, response) {
  ['me','client_id','redirect_uri'].forEach((attr) => {
      if (! validator.isURL(request.query[attr] || '')) {
        error_page( 'Bad Request', `There was an error with the request. The "${attr}" field is invalid.`, response);
        return;
      }
  });
  if (! validator.matches(request.query.state || '', /^[\x20-\x7E]*$/)) {
    error_page( 'Bad Request',`There was an error with the request. The "state" field is invalid.`, response);
    return;
  }
  if (! validator.matches(request.query.response_type || 'id', /^(id|code)?$/)) {
    error_page('Bad Request',`There was an error with the request. The "response_type" field must be "id" or "code".`, response);
    return;
  }
  if (! validator.matches(request.query.scope || '', /^([\x21\x23-\x5B\x5D-\x7E]+( [\x21\x23-\x5B\x5D-\x7E]+)*)?$/)) {
    error_page( 'Bad Request', `There was an error with the request. The "scope" field contains invalid data.`, response);
    return;
  }
  var me = request.query.me;
  var client_id = request.query.client_id;
  var redirect_uri = request.query.redirect_uri;
  var state = request.query.state;
  var response_type = request.query.response_type || 'id';
  var scope = request.query.scope;
  var has_scopes = (scope != undefined);
  
  if (response_type != 'code' && has_scopes) { // scope defined on identification request.
    error_page( 'Bad Request', 'There was an error with the request. The "scope" field cannot be used with identification.', response);
    return;
  }
  if (response_type == 'code' && ! has_scopes) { // scope omitted on code request.
    error_page( 'Bad Request', 'There was an error with the request. The "scope" field must be used with code requests.', response);
    return;
  }
  var csrf_code = create_signed_code(process.env.APP_KEY, client_id + redirect_uri + state, 2 * 60);

  response.render('index', {
    me: me,
    client_id: client_id,
    has_scopes: has_scopes,
    scopes: has_scopes ? scope.split(' ') : [],
    redirect_uri: redirect_uri,
    csrf_code: csrf_code
  });
});

app.post('/', function(request, response) {
  var code = request.body.code;
  var pass_input = request.body.password;
  if ( code !== undefined ) {
    handle_code_request(code, request, response);
  } else if ( pass_input !== undefined ) {
    handle_password_request(pass_input, request, response);
  } else {
    // bad response
  }
});

function handle_code_request( code, request, response ){
  // FIXME: validate these!
  var redirect_uri = request.body.redirect_uri;
  var client_id = request.body.client_id;
  if ( ! verify_signed_code(process.env.APP_KEY, process.env.USER_URL + redirect_uri + client_id, code) ) {
    error_page('Verification Failed', 'Given Code Was Invalid', response);
    return;
  }
  var ret = { me: process.env.USER_URL };
  var code_parts = code.split(':');
  if (code_parts[2] !== '') {
      ret['scope'] = code_parts[2];
  }
  if (request.accepts('application/json')) {
    response.send(ret);
  } else {
    response.set('Content-Type', 'application/x-www-form-urlencoded');
    response.send(querystring.stringify(response));  
  }
}

function handle_password_request( pass_input, request, response ) {
  var csrf_code = request.body._csrf;
  // FIXME: also validate these like in app.get('/')
  var me = request.query.me;
  var client_id = request.query.client_id;
  var redirect_uri = request.query.redirect_uri;
  var state = request.query.state;
  
  // Exit if the CSRF does not verify.
  if (csrf_code === undefined || !verify_signed_code(process.env.APP_KEY, client_id + redirect_uri + state, csrf_code)) {
    error_page( 'Invalid CSRF Code', 'Usually this means you took too long to log in. Please try again.', response);
    return;
  }
  
  // Exit if the password does not verify.
  if (!verify_password(me, pass_input)) {
    error_page('Login Failed', 'Invalid username or password.', response);
    return;
  }
  
  var scope = request.body.scopes;
  // Scopes are defined.
  if (scope != undefined) {
      // FIXME: Exit if the scopes ended up with illegal characters or were not supplied as array.
      // Turn scopes into a single string again.
      scope = scope.join(' ');
  }
  var code = create_signed_code(process.env.APP_KEY, process.env.USER_URL + redirect_uri + client_id, 5 * 60, scope);
  var final_redir = redirect_uri;
  if (redirect_uri.indexOf('?') === -1) {
      final_redir += '?';
  } else {
      final_redir += '&';
  }
  var parameters = { code, me };
  if (state !== null) {
      parameters['state'] = state;
  }
  final_redir += querystring.stringify(parameters);
  response.redirect(final_redir);
}

// listen for requests :)
var listener = app.listen(process.env.PORT, function () {
  console.log('Your app is listening on port ' + listener.address().port);
});

// Signed codes always have an time-to-live, by default 1 year (31536000 seconds).
function create_signed_code(key, message, ttl = 31536000, appended_data = '')
{
    var expires = Date.now() + (ttl * 1000);
    var body = message + expires + appended_data;
    var signature = crypto.createHmac('sha256', key).update(body).digest('hex');
    return expires.toString(16) + ':' + signature + ':' + appended_data;
}

function verify_signed_code(key, message, code)
{
    var code_parts = code.split(':');
    if (code_parts.length != 3) {
        return false;
    }
    var expires = parseInt(code_parts[0], 16);
    if (Date.now() > expires) {
        return false;
    }
    var body = message + expires + code_parts[2];
    var signature = crypto.createHmac('sha256', key).update(body).digest('hex');
    return signature == code_parts[1];
}

function verify_password(url, pass)
{
    var input_user = url.replace(/^https?:\/\//, '').replace(/^\//, '').replace(/\/$/, '');
    var hash = crypto.createHash('md5').update(input_user).update(pass).update(process.env.APP_KEY).digest('hex');
    var configured_user = process.env.USER_URL.replace(/^https?:\/\//, '').replace(/^\//, '').replace(/\/$/, '');
    return (input_user == configured_user && process.env.USER_HASH == hash);
}

function error_page(error, message, response) {
  response.status(400).render('error', { error, message });
}